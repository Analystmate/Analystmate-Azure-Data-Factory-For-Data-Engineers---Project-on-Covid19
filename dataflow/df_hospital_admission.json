{
	"name": "df_hospital_admission",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hosptital_Addmissin_data",
						"type": "DatasetReference"
					},
					"name": "HospitalAddmision"
				},
				{
					"dataset": {
						"referenceName": "DS_for_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryData"
				},
				{
					"dataset": {
						"referenceName": "Ds_dim_date",
						"type": "DatasetReference"
					},
					"name": "StDimDate"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "RemoveUnwanted"
				},
				{
					"name": "lookupWithCountyData"
				},
				{
					"name": "KeepKeyField"
				},
				{
					"name": "split1"
				},
				{
					"name": "DerivedEcdcYearWeek"
				},
				{
					"name": "AggDimDate"
				},
				{
					"name": "JoinWithDate"
				},
				{
					"name": "pivotweekly"
				},
				{
					"name": "DailyPivot"
				},
				{
					"name": "selectweekly"
				},
				{
					"name": "joinwihdate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as integer,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAddmision",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryData",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> StDimDate",
				"HospitalAddmision select(mapColumn(",
				"          country,",
				"          indicator,",
				"          {Reported date} = date,",
				"          year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveUnwanted",
				"RemoveUnwanted, CountryData lookup(RemoveUnwanted@country == CountryData@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupWithCountyData",
				"lookupWithCountyData select(mapColumn(",
				"          country = RemoveUnwanted@country,",
				"          country = CountryData@country,",
				"          country_code_2_digit,",
				"          source,",
				"          indicator,",
				"          {Reported date},",
				"          year_week,",
				"          value,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> KeepKeyField",
				"KeepKeyField split(indicator == \"Weekly new hospital admissions per 100k\" || indicator == \"Weekly new ICU admissions per 100k\",",
				"     disjoint: false) ~> split1@(Weekly, Daily)",
				"StDimDate derive(ecdc_YearWeek = year + \"-W\" + lpad(week_of_year,2,'0')) ~> DerivedEcdcYearWeek",
				"DerivedEcdcYearWeek aggregate(groupBy(ecdc_YearWeek),",
				"     Week_start_date = max(date),",
				"          Week_end_date = min(date)) ~> AggDimDate",
				"split1@Weekly, AggDimDate join(year_week == ecdc_YearWeek,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithDate",
				"split1@Weekly pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          source),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     Count = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotweekly",
				"split1@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          {Reported date}),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     {} = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> DailyPivot",
				"JoinWithDate select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          source,",
				"          indicator,",
				"          {Reported date},",
				"          year_week,",
				"          value,",
				"          country_code_3_digit,",
				"          population,",
				"          ecdc_YearWeek,",
				"          Week_start_date,",
				"          Week_end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectweekly",
				"split1@Daily, AggDimDate join(year_week == ecdc_YearWeek,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinwihdate"
			]
		}
	}
}